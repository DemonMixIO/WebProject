import asyncio

from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, CommandHandler

from logic import *
from tokens import TG_TOKEN


async def tg_get_wiki_summary(update, context):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /wiki <–∑–∞–ø—Ä–æ—Å>')
        return
    await update.message.reply_text(get_wiki_summary(query))


async def tg_start(update, context):
    keyboard = [['–ò–≥—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ', '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—èüîÆ']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def tg_astrology_select_sign(update, context):
    keyboard = []
    signs = astrology_get_signs()
    keyboard.append(signs[:4])
    keyboard.append(signs[4:8])
    keyboard.append(signs[8:12])
    keyboard.append(['–ù–∞–∑–∞–¥'])
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:', reply_markup=reply_markup)


async def tg_astrology_get_horoscope(update, context):
    caption, image = astrology_get_horoscope(update.message.text)
    await context.bot.send_photo(chat_id=update.message.chat_id, photo=image, caption=caption)


async def tg_info(update, context):
    keyboard = [['–£–∑–Ω–∞—Ç—å –¥–∞—Ç—ÉüìÖ', '–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è‚åö', '/wiki'], ['/cat', '/dog', '–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def tg_date(update, context):
    await update.message.reply_text(date)


async def tg_time(update, context):
    await update.message.reply_text(time)


async def tg_astrology(update, context):
    keyboard = [['–ì–æ—Ä–æ—Å–∫–æ–ø‚õé', '–£–∑–Ω–∞—Ç—å –¥–∞—Ç—ÉüìÖ'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def tg_player_start(update, context):
    keyboard = [['–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫üé≤', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä‚è≤'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def tg_dice(update, context):
    keyboard = [['1x6', '2x6', '1x20'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –±—Ä–æ—Å–∫–∞:', reply_markup=reply_markup)


async def tg_timer(update, context):
    keyboard = [['30 —Å–µ–∫—É–Ω–¥', '1 –º–∏–Ω—É—Ç–∞', '5 –º–∏–Ω—É—Ç'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:', reply_markup=reply_markup)


async def tg_handle_dice_roll(update, context):
    result = handle_dice_roll(update.message.text)
    await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


async def tg_handle_timer(update, context):
    query = update.message.text
    seconds = handle_timer(update.message.text)
    if seconds:
        keyboard = [['–ñ–¥—É...']]
        reply_markup = ReplyKeyboardMarkup(keyboard)
        await update.message.reply_text(f'–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω: {query}. –ñ–¥–∏üôÇ', reply_markup=reply_markup)
        await asyncio.sleep(seconds)
        await update.message.reply_text(f"{query} –∏—Å—Ç–µ–∫–ª–æ")
        await tg_timer(update, context)
    else:
        await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {query}")
        await tg_timer(update, context)


async def tg_back_to_start(update, context):
    await tg_start(update, context)


async def tg_get_random_cat_pic(update, context):
    img = get_random_cat_pic()
    await context.bot.send_photo(chat_id=update.message.chat_id, photo=img)


async def tg_get_random_dog_pic(update, context):
    img = get_random_dog_pic()
    await context.bot.send_photo(chat_id=update.message.chat_id, photo=img)

async def tg_command_dice(update, context):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /dice <–∫–æ–ª-–≤–æ –∫–æ—Å—Ç–µ–π>x<–∫–æ–ª-–≤–æ –≥—Ä–∞–Ω–µ–π>')
        return
    await update.message.reply_text(handle_dice_roll(query))


async def tg_help(update, context):
    text = '''
/cat - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞
/dog - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏
/time - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/date - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
/wiki <–∑–∞–ø—Ä–æ—Å> - –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –í–∏–∫–∏–ø–µ–¥–∏–∏
/dice <–∫–æ–ª-–≤–æ –∫–æ—Å—Ç–µ–π>x<–∫–æ–ª-–≤–æ –≥—Ä–∞–Ω–µ–π> - –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏
    '''
    await update.message.reply_text(text)


def tg_launch(token):
    print('telegram bot started')
    tg_application = Application.builder().token(token).build()
    tg_application.add_handler(CommandHandler("wiki", tg_get_wiki_summary))
    tg_application.add_handler(CommandHandler("cat", tg_get_random_cat_pic))
    tg_application.add_handler(CommandHandler("dog", tg_get_random_dog_pic))
    tg_application.add_handler(CommandHandler("date", tg_date))
    tg_application.add_handler(CommandHandler("time", tg_time))
    tg_application.add_handler(CommandHandler("dice", tg_command_dice))
    tg_application.add_handler(CommandHandler("help", tg_help))
    tg_application.add_handler(MessageHandler(filters.Regex('–°—Ç–∞—Ä—Ç'), tg_start))
    tg_application.add_handler(MessageHandler(filters.Regex('–ù–∞–∑–∞–¥'), tg_back_to_start))
    tg_application.add_handler(MessageHandler(filters.Regex('–ì–æ—Ä–æ—Å–∫–æ–ø‚õé'), tg_astrology_select_sign))
    tg_application.add_handler(MessageHandler(filters.Regex('–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—èüîÆ'), tg_astrology))
    tg_application.add_handler(MessageHandler(filters.Regex('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ'), tg_info))
    tg_application.add_handler(MessageHandler(filters.Regex('–£–∑–Ω–∞—Ç—å –¥–∞—Ç—ÉüìÖ'), tg_date))
    tg_application.add_handler(MessageHandler(filters.Regex('–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è‚åö'), tg_time))
    tg_application.add_handler(MessageHandler(filters.Regex('–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫üé≤'), tg_dice))
    tg_application.add_handler(MessageHandler(filters.Regex('^(1x6|2x6|1x20)$'), tg_handle_dice_roll))
    tg_application.add_handler(MessageHandler(filters.Regex('–ò–≥—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫'), tg_player_start))
    tg_application.add_handler(MessageHandler(filters.Regex('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä‚è≤'), tg_timer))
    tg_application.add_handler(MessageHandler(filters.Regex('^(30 —Å–µ–∫—É–Ω–¥|1 –º–∏–Ω—É—Ç–∞|5 –º–∏–Ω—É—Ç)$'), tg_handle_timer))
    tg_application.add_handler(MessageHandler(filters.Regex(
        '^(Aries|Taurus|Gemini|Cancer|Leo|Virgo|Libra|Scorpio|Sagittarius|Capricorn|Aquarius|Pisces)$'),
        tg_astrology_get_horoscope))
    tg_application.run_polling()


if __name__ == '__main__':
    tg_launch(TG_TOKEN)
