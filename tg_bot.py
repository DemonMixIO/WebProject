import asyncio
import datetime
import random

import requests
from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters

from logic import *

TG_BOT_TOKEN = '7160249519:AAHlmU8Giwfpq9VJ9kpuliWtJeDzV6G3fII'


async def tg_start(update, context):
    keyboard = [['–ò–≥—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ', '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—èüîÆ']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def tg_astrology_select_sign(update, context):
    keyboard = []
    signs = astrology_get_signs()
    keyboard.append(signs[:4])
    keyboard.append(signs[4:8])
    keyboard.append(signs[8:12])
    keyboard.append(['–ù–∞–∑–∞–¥'])
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:', reply_markup=reply_markup)


async def tg_astrology_get_goroscope(update, context):
    url = "https://newastro.vercel.app/"
    payload = {
        "date": (datetime.datetime.now() - datetime.timedelta(days=1)).strftime("%Y-%m-%d"),
        "lang": "ru",
        "sign": update.message.text
    }
    response = requests.post(url, json=payload)
    caption = response.json()['horoscope'].split(' - ', 1)[1].replace('.', '. '.replace(' -', ' - '))
    await context.bot.send_photo(chat_id=update.message.chat_id, photo=response.json()['icon'], caption=caption)


async def tg_info(update, context):
    keyboard = [['–£–∑–Ω–∞—Ç—å –¥–∞—Ç—ÉüìÖ', '–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è‚åö'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def tg_date(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /date"""
    await update.message.reply_text(datetime.datetime.now().strftime('%d.%m.%Y'))


async def tg_time(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /time"""
    await update.message.reply_text(datetime.datetime.now().strftime('%H:%M:%S'))


async def tg_astrology(update, context):
    keyboard = [['–ì–æ—Ä–æ—Å–∫–æ–ø‚õé', '–£–∑–Ω–∞—Ç—å –¥–∞—Ç—ÉüìÖ'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def tg_player_start(update, context):
    keyboard = [['–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫üé≤', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä‚è≤'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def tg_dice(update, context):
    keyboard = [['1x6', '2x6', '1x20'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –±—Ä–æ—Å–∫–∞:', reply_markup=reply_markup)


async def tg_timer(update, context):
    keyboard = [['30 —Å–µ–∫—É–Ω–¥', '1 –º–∏–Ω—É—Ç–∞', '5 –º–∏–Ω—É—Ç'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:', reply_markup=reply_markup)


async def tg_handle_dice_roll(update, context):
    query = update.message.text
    if query == '1x6':
        result = random.randint(1, 6)
    elif query == '2x6':
        result = f"{random.randint(1, 6)}, {random.randint(1, 6)}"
    elif query == '1x20':
        result = random.randint(1, 20)
    else:
        return
    await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


async def tg_handle_timer(update, context):
    query = update.message.text
    if query == '30 —Å–µ–∫—É–Ω–¥':
        seconds = 30
    elif query == '1 –º–∏–Ω—É—Ç–∞':
        seconds = 60
    elif query == '5 –º–∏–Ω—É—Ç':
        seconds = 300
    else:
        return
    keyboard = [['–ñ–¥—É...']]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text(f'–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω: {query}. –ñ–¥–∏üôÇ', reply_markup=reply_markup)
    await asyncio.sleep(seconds)
    await update.message.reply_text(f"{query} –∏—Å—Ç–µ–∫–ª–æ")
    await tg_timer(update, context)


async def tg_close_timer(update, context):
    await update.message.reply_text('–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω.')
    await tg_timer(update, context)


async def tg_back_to_start(update, context):
    await tg_start(update, context)


def tg_launch():
    tg_application = Application.builder().token(TG_BOT_TOKEN).build()
    tg_application.add_handler(MessageHandler(filters.Regex('–°—Ç–∞—Ä—Ç'), tg_start))
    tg_application.add_handler(MessageHandler(filters.Regex('–ò–≥—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫'), tg_player_start))
    tg_application.add_handler(MessageHandler(filters.Regex('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ'), tg_info))
    tg_application.add_handler(MessageHandler(filters.Regex('–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—èüîÆ'), tg_astrology))
    tg_application.add_handler(MessageHandler(filters.Regex('–£–∑–Ω–∞—Ç—å –¥–∞—Ç—ÉüìÖ'), tg_date))
    tg_application.add_handler(MessageHandler(filters.Regex('–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è‚åö'), tg_time))
    tg_application.add_handler(MessageHandler(filters.Regex('–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫üé≤'), tg_dice))
    tg_application.add_handler(MessageHandler(filters.Regex('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä‚è≤'), tg_timer))
    tg_application.add_handler(MessageHandler(filters.Regex('–ó–∞–∫—Ä—ã—Ç—å‚ùå'), tg_close_timer))
    tg_application.add_handler(MessageHandler(filters.Regex('^(1x6|2x6|1x20)$'), tg_handle_dice_roll))
    tg_application.add_handler(MessageHandler(filters.Regex('^(30 —Å–µ–∫—É–Ω–¥|1 –º–∏–Ω—É—Ç–∞|5 –º–∏–Ω—É—Ç)$'), tg_handle_timer))
    tg_application.add_handler(MessageHandler(filters.Regex('–ù–∞–∑–∞–¥'), tg_back_to_start))
    tg_application.add_handler(MessageHandler(filters.Regex('–ì–æ—Ä–æ—Å–∫–æ–ø‚õé'), tg_astrology_select_sign))
    tg_application.add_handler(MessageHandler(filters.Regex(
        '^(Aries|Taurus|Gemini|Cancer|Leo|Virgo|Libra|Scorpio|Sagittarius|Capricorn|Aquarius|Pisces)$'),
        tg_astrology_get_goroscope))
    tg_application.run_polling()


if __name__ == '__main__':
    tg_launch()
